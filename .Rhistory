plot(Credit)
graphics.off()
## Combine the data ----
Taux <- ts_span(
ts_c(
Monet, Oblig, Direct, Credit, Credit2
),
start = startDate
)
plot(Taux)
graphics.off()
# Before 2019, there was a target range instead of a policy rate. Take the middle of the
# target range
Taux <- Taux |>
ts_tbl() |>
pivot_wider(names_from = id, values_from = value) |>
mutate(Direct = if_else(is.na(Direct), (Super + Infer) / 2, Direct))
Taux <- xts(x = Taux[, -c(1)], order.by = Taux$time)
plot(Taux)
graphics.off()
## Taux directeur vs SARON (LIBOR) ----
p <- ts_df(
ts_c(
`Taux directeur` = Taux$Direct,
`Swiss Average Rate Overnight (SARON)` = ts_span(Taux$SARON, start = "2019-06-01"),
`CHF Libor à trois mois` = ts_span(Taux$LIB3M, start = startDate, end = "2019-05-01")
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
theme_minimal() +
labs(
title = "Taux directeur et taux sur le marché monétaire (en %)",
subtitle = "<span style = 'color: black;'>Taux directeur</span>, <span style = 'color: #1B9E77;'>CHF Libor à trois mois</span>,  <span style = 'color: #D95F02;'>Swiss Average Rate Overnight (SARON)</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/TauxDirecteur.png", width = 8, height = 4)
graphics.off()
## Recession 2002 ----
p <- ts_df(
ts_c(
`Taux directeur`         = ts_span(Taux$Direct, start = startDate, end = "2004-01-01"),
`Conféderation à 10 ans` = ts_span(Taux$Conf10, start = startDate, end = "2004-01-01"),
`Entreprises à 8 ans`    = ts_span(Taux$Manuf8, start = startDate, end = "2004-01-01"),
`Prêts hypothécairses`   = ts_span(Taux$Hypo, start = startDate, end = "2004-01-01"),
`Dépôt d'épargnes`       = ts_span(Taux$Epargne, start = startDate, end = "2004-01-01")
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Taux d'intérêts pendant la recession 2001/2002 (en %)",
subtitle = "<span style = 'color: #1B9E77;'>Conféderation à 10 ans</span>, <span style = 'color: #D95F02;'>Dépôt d'épargnes</span>, <span style = 'color: #7570B3;'>Enreprises à 8 ans</span>, <span style = 'color: #E7298A;'>Prêts hypothécaires</span>, <span style = 'color: black;'>Taux directeur</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "black", "#E6AB02", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/AutresTaux2001.png", width = 8, height = 4)
graphics.off()
## Recession 2008 ----
p <- ts_df(
ts_c(
`Taux directeur` = ts_span(Taux$Direct, "2006-01-01", "2010-01-01"),
`Conféderation à 10 ans` = ts_span(Taux$Conf10, "2006-01-01", "2010-01-01"),
`Entreprises à 8 ans` = ts_span(Taux$Manuf8, "2006-01-01", "2010-01-01"),
`Prêts hypothécaires` = ts_span(Taux$Hypo, "2006-01-01", "2010-01-01"),
`Dépôts d'épargnes` = ts_span(Taux$Epargne, "2006-01-01", "2010-01-01")
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Taux d'intérêts pendant la recession 2008/2009 (en %)",
subtitle = "<span style = 'color: #1B9E77;'>Conféderation à 10 ans</span>, <span style = 'color: #D95F02;'>Dépôt d'épargnes</span>, <span style = 'color: #7570B3;'>Enreprises à 8 ans</span>, <span style = 'color: #E7298A;'>Prêts hypothécaires</span>, <span style = 'color: black;'>Taux directeur</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
theme_minimal() +
ylab("") +
xlab("") +
geom_line(aes(), linewidth = 1) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "black", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/AutresTaux2008.png", width = 8, height = 4)
graphics.off()
# Taux négatifs
p <- ts_df(
ts_c(
`Taux directeur` = ts_span(Taux$Direct, "2013-01-01", "2017-01-01"),
`Conféderation à 10 ans` = ts_span(Taux$Conf10, "2013-01-01", "2017-01-01"),
`Entreprises à 8 ans` = ts_span(Taux$Manuf8, "2013-01-01", "2017-01-01"),
`Prêts hypothécaires` = ts_span(Taux$Hypo, "2013-01-01", "2017-01-01"),
`Dépôts d'épargnes` = ts_span(Taux$Epargne, "2013-01-01", "2017-01-01")
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Taux d'intérêts en territoire négatif (en %)",
subtitle = "<span style = 'color: #1B9E77;'>Conféderation à 10 ans</span>, <span style = 'color: #D95F02;'>Dépôt d'épargnes</span>, <span style = 'color: #7570B3;'>Enreprises à 8 ans</span>, <span style = 'color: #E7298A;'>Prêts hypothécaires</span>, <span style = 'color: black;'>Taux directeur</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "black", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/AutresTaux2015.png", width = 8, height = 4)
graphics.off()
## Crise Corona ----
p <- ts_df(
ts_c(
`Taux directeur` = ts_span(Taux$Direct, "2016-01-01", endDate),
`Conféderation à 10 ans` = ts_span(Taux$Conf10, "2016-01-01", endDate),
`Entreprises à 8 ans` = ts_span(Taux$Manuf8, "2016-01-01", endDate),
`Prêts hypothécaires` = ts_span(Taux$Hypo, "2016-01-01", endDate),
`Dépôts d'épargnes` = ts_span(Taux$Epargne, "2016-01-01", endDate)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Taux d'intérêts pendant la crise Corona (en %)",
subtitle = "<span style = 'color: #1B9E77;'>Conféderation à 10 ans</span>, <span style = 'color: #D95F02;'>Dépôt d'épargnes</span>, <span style = 'color: #7570B3;'>Enreprises à 8 ans</span>, <span style = 'color: #E7298A;'>Prêts hypothécaires</span>, <span style = 'color: black;'>Taux directeur</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "black", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/AutresTauxCorona.png", width = 8, height = 4)
graphics.off()
library(tsbox)
library(forecast)
library(xts)
library(readxl)
library(ggtext)
calcIndex <- function(series, weights, baseY) {
# Useful function to calculate weighted mean of indexed series
series <- ts_index(series, baseY) * 100
Index <- sapply(X = seq_len(nrow(series)), FUN = function(i) {
weighted.mean(x = as.matrix(series[i, ]), w = weights, na.rm = TRUE)
})
Index <- xts(Index, order.by = as.Date(index(series)))
return(Index)
}
startDate <- "2000-01-01"
endDate   <- "2020-04-01" # Has to be last observation of CPI
# ************************************************************************
# Video available on www.youtube.com/channel/UCJpACBsnn1eQTObWz5LniGg
#
# Feel free to copy, adapt, and use this code for your own purposes at
# your own risk.
#
# Matthias Spichiger, 2023 (matthias.spichiger@bluewin.ch)
# Based on Daniel Kaufmann, 2020 (daniel.kaufmann@unine.ch)
# Université de Neuchâtel et KOF Centre de recherches conjoncturelles
# ************************************************************************
library(tsbox)
library(xts)
library(readxl)
library(ggtext)
# ideally put these series into a separate file and access them with the source() comand.
calcIndex <- function(series, weights, baseY) {
# Useful function to calculate weighted mean of indexed series
series <- ts_index(series, baseY) * 100
Index <- sapply(X = seq_len(nrow(series)), FUN = function(i) {
weighted.mean(x = as.matrix(series[i, ]), w = weights, na.rm = TRUE)
})
Index <- xts(Index, order.by = as.Date(index(series)))
return(Index)
}
startDate <- "2000-01-01"
endDate   <- round_date(x = today(), unit = "month") - months(1) # Has to be last observation of CPI
endDate
round_date(x = today(), unit = "month")
endDate   <- round_date(x = today(), unit = "month") - months(2) # Has to be last observation of CPI
endDate   <- floor_date(x = today(), unit = "month") - months(1) # Has to be last observation of CPI
endDate
# ************************************************************************
# Download the data ----
# ************************************************************************
download.file(
url = "https://www.bfs.admin.ch/bfsstatic/dam/assets/12827309/master",
destfile = "S01E04_Prix/IPC.xlsx",
mode = "wb"
)
# Import the data ----
Date <- seq(from = as.Date("1982-12-01"), to = as.Date(endDate), by = "month")
endDate   <- "2020-04-01"
# ************************************************************************
# Download the data ----
# ************************************************************************
download.file(
url = "https://www.bfs.admin.ch/bfsstatic/dam/assets/12827309/master",
destfile = "S01E04_Prix/IPC.xlsx",
mode = "wb"
)
# Import the data ----
Date <- seq(from = as.Date("1982-12-01"), to = as.Date(endDate), by = "month")
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx")
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix)
Comp <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Components")
head(Comp)
Prix[1:3, 8:dim(Prix)[2]]
dim(Prix)
nrow(Prix)
ncol(Prix)
t(Prix[1:3, 8:ncol(Prix)])
head(Prix)
Prix[1:3]
Prix <- xts(t(Prix[c("Code", "PosNo", "PosType"), 8:ncol(Prix)]), order.by = Date)
plot(Prix)
Prix
Prix <- xts(t(Prix[1:3, 8:ncol(Prix)]), order.by = Date)
# Note that some adjustments have been made manually!
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix)
Comp <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Components")
head(Comp)
Prix <- xts(t(Prix[1:3, 8:ncol(Prix)]), order.by = Date)
plot(Prix)
Comp$PosType
head(Comp)
# Note that some adjustments have been made manually!
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix)
# Import the data ----
Date <- seq(from = as.Date("1982-12-01"), to = as.Date(endDate), by = "month")
# Note that some adjustments have been made manually!
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix) # Code, PosNo, PosType, Level, Position_D, Missing, Weight
Comp <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Components")
head(Comp) # Code, PosNo, PosType, Level, Position_D, Missing, Weight
Prix <- xts(t(Prix[1:3, 8:ncol(Prix)]), order.by = Date)
plot(Prix)
Type    <- Comp$PosType
Weight  <- as.numeric(Comp$Weight)
Index   <- xts(t(Comp[, 8:ncol(Comp)]), order.by = Date)
Missing <- Comp$Missing
Weight <- Weight[Type == 4]
Index  <- Index[, Type == 4, ]
Weight[is.na(Weight)] <- 0
Missing <- Missing[Type == 4]
Missing[is.na(Missing)] <- 0
Baseline <- ts_span(calcIndex(Index, Weight, "2015-12-01"), "2010-12-01")
Counterf <- ts_span(calcIndex(Index[, Missing == 0], Weight[Missing == 0], "2015-12-01"), "2010-12-01")
plot(ts_c(Baseline, Counterf, Prix[, 1]))
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "",
caption = "",
x = "", y = ""
) +
theme_minimal() +
ylab("") +
xlab("") +
geom_line(aes(), size = 1) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", size = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", size = 0.1, linetype = "dotted"), panel.grid.minor = element_blank())
graphics.off()
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "",
caption = "",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank())
p
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "span style = 'color: #1B9E77;'>IPC (officiel)</span>, span style = 'color: #D95F02;'>IPC (sans categories avec prix imputés en Avril 2020)</span>",
caption = "@econmaett. Source de données: Office fédéral de la statistique (OFS), SIX.",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "<span style = 'color: #1B9E77;'>IPC (officiel)</span>, <span style = 'color: #D95F02;'>IPC (sans categories avec prix imputés en Avril 2020)</span>",
caption = "@econmaett. Source de données: Office fédéral de la statistique (OFS), SIX.",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E04_Prix/PrixImpute.png", width = 8, height = 4)
graphics.off()
## IPC domestique vs importé ----
p <- ts_df(
ts_c(
`IPC` = ts_pcy(ts_span(Prix[, 1], "2015-12-01")),
`Biens domestiques` = ts_pcy(ts_span(Prix[, 2], "2015-12-01")),
`Biens importés` = ts_pcy(ts_span(Prix[, 3], "2015-12-01"))
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "",
caption = "",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank())
p
## IPC domestique vs importé ----
p <- ts_df(
ts_c(
`IPC` = ts_pcy(ts_span(Prix[, 1], "2015-12-01")),
`Biens domestiques` = ts_pcy(ts_span(Prix[, 2], "2015-12-01")),
`Biens importés` = ts_pcy(ts_span(Prix[, 3], "2015-12-01"))
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "<span style = 'color: #1B9E77;'>Biens domestiques</span>, <span style = 'color: #D95F02;'>Biens importés</span>, <span style = 'color: black;'>IPC</span>",
caption = "@econmaett. Source de données: Office fédéral de la statistique (OFS), SIX.",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E04_Prix/Inflation.png", width = 8, height = 4)
graphics.off()
usethis::use_git()
usethis::use_github()
usethis::use_git()
