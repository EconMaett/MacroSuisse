scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Taux d'intérêts en territoire négatif (en %)",
subtitle = "<span style = 'color: #1B9E77;'>Conféderation à 10 ans</span>, <span style = 'color: #D95F02;'>Dépôt d'épargnes</span>, <span style = 'color: #7570B3;'>Enreprises à 8 ans</span>, <span style = 'color: #E7298A;'>Prêts hypothécaires</span>, <span style = 'color: black;'>Taux directeur</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "black", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/AutresTaux2015.png", width = 8, height = 4)
graphics.off()
## Crise Corona ----
p <- ts_df(
ts_c(
`Taux directeur` = ts_span(Taux$Direct, "2016-01-01", endDate),
`Conféderation à 10 ans` = ts_span(Taux$Conf10, "2016-01-01", endDate),
`Entreprises à 8 ans` = ts_span(Taux$Manuf8, "2016-01-01", endDate),
`Prêts hypothécaires` = ts_span(Taux$Hypo, "2016-01-01", endDate),
`Dépôts d'épargnes` = ts_span(Taux$Epargne, "2016-01-01", endDate)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Taux d'intérêts pendant la crise Corona (en %)",
subtitle = "<span style = 'color: #1B9E77;'>Conféderation à 10 ans</span>, <span style = 'color: #D95F02;'>Dépôt d'épargnes</span>, <span style = 'color: #7570B3;'>Enreprises à 8 ans</span>, <span style = 'color: #E7298A;'>Prêts hypothécaires</span>, <span style = 'color: black;'>Taux directeur</span>",
caption = "@econmaett. Source de données: Banque Nationale Suisse (BNS).",
x = "", y = ""
) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "black", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E03_TauxDirecteur/AutresTauxCorona.png", width = 8, height = 4)
graphics.off()
library(tsbox)
library(forecast)
library(xts)
library(readxl)
library(ggtext)
calcIndex <- function(series, weights, baseY) {
# Useful function to calculate weighted mean of indexed series
series <- ts_index(series, baseY) * 100
Index <- sapply(X = seq_len(nrow(series)), FUN = function(i) {
weighted.mean(x = as.matrix(series[i, ]), w = weights, na.rm = TRUE)
})
Index <- xts(Index, order.by = as.Date(index(series)))
return(Index)
}
startDate <- "2000-01-01"
endDate   <- "2020-04-01" # Has to be last observation of CPI
# ************************************************************************
# Video available on www.youtube.com/channel/UCJpACBsnn1eQTObWz5LniGg
#
# Feel free to copy, adapt, and use this code for your own purposes at
# your own risk.
#
# Matthias Spichiger, 2023 (matthias.spichiger@bluewin.ch)
# Based on Daniel Kaufmann, 2020 (daniel.kaufmann@unine.ch)
# Université de Neuchâtel et KOF Centre de recherches conjoncturelles
# ************************************************************************
library(tsbox)
library(xts)
library(readxl)
library(ggtext)
# ideally put these series into a separate file and access them with the source() comand.
calcIndex <- function(series, weights, baseY) {
# Useful function to calculate weighted mean of indexed series
series <- ts_index(series, baseY) * 100
Index <- sapply(X = seq_len(nrow(series)), FUN = function(i) {
weighted.mean(x = as.matrix(series[i, ]), w = weights, na.rm = TRUE)
})
Index <- xts(Index, order.by = as.Date(index(series)))
return(Index)
}
startDate <- "2000-01-01"
endDate   <- round_date(x = today(), unit = "month") - months(1) # Has to be last observation of CPI
endDate
round_date(x = today(), unit = "month")
endDate   <- round_date(x = today(), unit = "month") - months(2) # Has to be last observation of CPI
endDate   <- floor_date(x = today(), unit = "month") - months(1) # Has to be last observation of CPI
endDate
# ************************************************************************
# Download the data ----
# ************************************************************************
download.file(
url = "https://www.bfs.admin.ch/bfsstatic/dam/assets/12827309/master",
destfile = "S01E04_Prix/IPC.xlsx",
mode = "wb"
)
# Import the data ----
Date <- seq(from = as.Date("1982-12-01"), to = as.Date(endDate), by = "month")
endDate   <- "2020-04-01"
# ************************************************************************
# Download the data ----
# ************************************************************************
download.file(
url = "https://www.bfs.admin.ch/bfsstatic/dam/assets/12827309/master",
destfile = "S01E04_Prix/IPC.xlsx",
mode = "wb"
)
# Import the data ----
Date <- seq(from = as.Date("1982-12-01"), to = as.Date(endDate), by = "month")
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx")
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix)
Comp <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Components")
head(Comp)
Prix[1:3, 8:dim(Prix)[2]]
dim(Prix)
nrow(Prix)
ncol(Prix)
t(Prix[1:3, 8:ncol(Prix)])
head(Prix)
Prix[1:3]
Prix <- xts(t(Prix[c("Code", "PosNo", "PosType"), 8:ncol(Prix)]), order.by = Date)
plot(Prix)
Prix
Prix <- xts(t(Prix[1:3, 8:ncol(Prix)]), order.by = Date)
# Note that some adjustments have been made manually!
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix)
Comp <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Components")
head(Comp)
Prix <- xts(t(Prix[1:3, 8:ncol(Prix)]), order.by = Date)
plot(Prix)
Comp$PosType
head(Comp)
# Note that some adjustments have been made manually!
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix)
# Import the data ----
Date <- seq(from = as.Date("1982-12-01"), to = as.Date(endDate), by = "month")
# Note that some adjustments have been made manually!
Prix <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Main")
head(Prix) # Code, PosNo, PosType, Level, Position_D, Missing, Weight
Comp <- read_excel(path = "S01E04_Prix/IPC_Manuelx.xlsx", sheet = "Components")
head(Comp) # Code, PosNo, PosType, Level, Position_D, Missing, Weight
Prix <- xts(t(Prix[1:3, 8:ncol(Prix)]), order.by = Date)
plot(Prix)
Type    <- Comp$PosType
Weight  <- as.numeric(Comp$Weight)
Index   <- xts(t(Comp[, 8:ncol(Comp)]), order.by = Date)
Missing <- Comp$Missing
Weight <- Weight[Type == 4]
Index  <- Index[, Type == 4, ]
Weight[is.na(Weight)] <- 0
Missing <- Missing[Type == 4]
Missing[is.na(Missing)] <- 0
Baseline <- ts_span(calcIndex(Index, Weight, "2015-12-01"), "2010-12-01")
Counterf <- ts_span(calcIndex(Index[, Missing == 0], Weight[Missing == 0], "2015-12-01"), "2010-12-01")
plot(ts_c(Baseline, Counterf, Prix[, 1]))
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "",
caption = "",
x = "", y = ""
) +
theme_minimal() +
ylab("") +
xlab("") +
geom_line(aes(), size = 1) +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", size = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", size = 0.1, linetype = "dotted"), panel.grid.minor = element_blank())
graphics.off()
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "",
caption = "",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank())
p
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "span style = 'color: #1B9E77;'>IPC (officiel)</span>, span style = 'color: #D95F02;'>IPC (sans categories avec prix imputés en Avril 2020)</span>",
caption = "@econmaett. Source de données: Office fédéral de la statistique (OFS), SIX.",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
# ************************************************************************
# Create charts ----
# ************************************************************************
p <- ts_df(
ts_c(
`IPC (officiel)` = ts_pcy(ts_span(Prix[, 1], "2010-12-01")),
# `IPC (propre calcul)`     = ts_pcy(Baseline),
`IPC (sans categories avec prix imputés en Avril 2020)` = ts_pcy(Counterf)
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "<span style = 'color: #1B9E77;'>IPC (officiel)</span>, <span style = 'color: #D95F02;'>IPC (sans categories avec prix imputés en Avril 2020)</span>",
caption = "@econmaett. Source de données: Office fédéral de la statistique (OFS), SIX.",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = ggtext::element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E04_Prix/PrixImpute.png", width = 8, height = 4)
graphics.off()
## IPC domestique vs importé ----
p <- ts_df(
ts_c(
`IPC` = ts_pcy(ts_span(Prix[, 1], "2015-12-01")),
`Biens domestiques` = ts_pcy(ts_span(Prix[, 2], "2015-12-01")),
`Biens importés` = ts_pcy(ts_span(Prix[, 3], "2015-12-01"))
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "",
caption = "",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank())
p
## IPC domestique vs importé ----
p <- ts_df(
ts_c(
`IPC` = ts_pcy(ts_span(Prix[, 1], "2015-12-01")),
`Biens domestiques` = ts_pcy(ts_span(Prix[, 2], "2015-12-01")),
`Biens importés` = ts_pcy(ts_span(Prix[, 3], "2015-12-01"))
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Taux d'inflation (par rapport à l'année précédente, en %)",
subtitle = "<span style = 'color: #1B9E77;'>Biens domestiques</span>, <span style = 'color: #D95F02;'>Biens importés</span>, <span style = 'color: black;'>IPC</span>",
caption = "@econmaett. Source de données: Office fédéral de la statistique (OFS), SIX.",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("#1B9E77", "#D95F02", "black", "#E7298A", "#E6AB02", "black", "#A6761D")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E04_Prix/Inflation.png", width = 8, height = 4)
graphics.off()
usethis::use_git()
usethis::use_github()
usethis::use_git()
usethis::use_git()
library(tidyverse)
library(tsbox)
library(xts)
library(readxl)
library(ggtext)
startDate <- "2007-06-01"
# ************************************************************************
# Compute risk premia ----
# ************************************************************************
## Download the data ----
urls <- c(
"https://www.bfs.admin.ch/bfsstatic/dam/assets/7966853/master",
"https://www.six-group.com/exchanges/downloads/indexdata/hsb_maturity_gov_y.csv",
"https://www.six-group.com/exchanges/downloads/indexdata/hsb_maturity_dom_non_gov_rating_sbi_y.csv"
)
names <- c("Defaults_OFS.xlsx", "ObligationsConf.csv", "ObligationsEnt.csv")
getwd()
# Ideally, you would use a tryCatch statement here
for (i in seq_along(urls)) {
download.file(url = urls[i], destfile = paste0("S01E01_PrimeDeRisque/", names[i]), mode = "wb", quiet = TRUE)
}
Gov      <- read_delim(file = "S01E01_PrimeDeRisque/ObligationsConf.csv", delim = ";", skip = 4)
NonGov   <- read_delim(file = "S01E01_PrimeDeRisque/ObligationsEnt.csv", delim = ";", skip = 4)
Defaults <- read_excel(path = "S01E01_PrimeDeRisque/Defaults_OFS.xlsx", sheet = "T6.2.3.1", skip = 1)
# Beginning of default procedures (Ouverture des procedures de faillite)
# I calculate the growth rate of default procedures as a share of active firms in 2017
# https://www.bfs.admin.ch/bfs/de/home/statistiken/industrie-dienstleistungen/unternehmen-beschaeftigte/unternehmensdemografie/bestand-aktiver.html
myDate     <- as.Date(paste0(names(Defaults[, 2:ncol(Defaults)]), "-01-01"))
myDefaults <- as.numeric(Defaults[1, 2:ncol(Defaults)]) # Eröffnung Konkursverfahren
Faillite   <- ts_diff(xts(x = myDefaults, order.by = myDate)) / 1000 # Take first difference, divide by 1000
# Create date series
myDate1 <- dmy(Gov$DATE)
myDate2 <- dmy(NonGov$DATE)
# Create gov. bond yields
Gov1  <- xts(as.numeric(pull(Gov[, 2])), order.by = myDate1) # SBIGY1: SBI Dom Gov 1-3 Y
Gov3  <- xts(as.numeric(pull(Gov[, 3])), order.by = myDate1) # SBIGY3: SBI Dom Gov 3-7 Y
Gov7  <- xts(as.numeric(pull(Gov[, 7])), order.by = myDate1) # SG71Y:  SBI Dom Gov 7-10 Y
Gov10 <- xts(as.numeric(pull(Gov[, 8])), order.by = myDate1) # SG10Y:  SBI Dom Gov 10+ Y
# Create corporate bond yields AAA - BBB
BBB1  <- xts(as.numeric(pull(NonGov[, 3])), order.by = myDate2) # SDN13Y: SBI Dom Non-Gov AAA-BBB 1-3 Y
BBB3  <- xts(as.numeric(pull(NonGov[, 4])), order.by = myDate2) # SDN35Y: SBI Dom Non-Gov AAA-BBB 3-5 Y
BBB7  <- xts(as.numeric(pull(NonGov[, 6])), order.by = myDate2) # SDN71Y: SBI Dom Non-Gov AAA-BBB 7-10 Y
BBB10 <- xts(as.numeric(pull(NonGov[, 7])), order.by = myDate2) # SDN10Y: SBI Dom Non-Gov AAA-BBB 10+ Y
AA1  <- xts(as.numeric(pull(NonGov[, 15])), order.by = myDate2) # SAN13Y: SBI Dom Non-Gov AAA-AA 1-3 Y
AA3  <- xts(as.numeric(pull(NonGov[, 16])), order.by = myDate2) # SAN35Y: SBI Dom Non-Gov AAA-AA 3-5 Y
AA7  <- xts(as.numeric(pull(NonGov[, 18])), order.by = myDate2) # SAN71Y: SBI Dom Non-Gov AAA-AA 7-10 Y
AA10 <- xts(as.numeric(pull(NonGov[, 19])), order.by = myDate2) # SAN10Y: SBI Dom Non-Gov AAA-AA 10+ Y
# Compute implies probability of default
# i: risk-less interest rate
# x:  risk premium
# x = (1+i+x) - (1+i) -> We can calculate the risk premium as the rate of return between
#                        a risk-less investment and the corporate bond yield
RPBBB1 <- BBB1 - Gov1
RPAAA1 <- AA1  - Gov1
# Important dates; Bankruptcy of Lehman Brothers, removal of CHF-EUR peg, COVID-19 pandemic
myLines <- c(as.numeric(as.Date("2008-09-15")), as.numeric(as.Date("2015-01-15")), as.numeric(as.Date("2020-02-01")))
# ************************************************************************
# Government & investment-grade corporate bond yields ----
# ************************************************************************
p <- ts_df(
ts_span(
ts_c(
`Confédération` = Gov1,
`Entreprises (notation AA-AAA)` = AA1,
`Entreprises (notation BBB-AAA)` = BBB1
),
start = startDate
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
labs(
title = "Rendements des obligations à 1 ans (en %)",
subtitle = "<span style = 'color: black;'>Confédération</span>, <span style = 'color: #1B9E77;'>Entreprises (AA-AAA)</span>, <span style = 'color: #D95F02;'>Entreprises (BBB-AAA)</span>",
caption = "@econmaett. Source de données: SIX",
x = "", y = ""
) +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_color_manual(values = c("black", "#1B9E77", "#D95F02")) +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = element_markdown(), legend.position = "none")
p
ggsave(filename = "S01E01_PrimeDeRisque/Obligations.png", width = 8, height = 4)
graphics.off()
# ************************************************************************
# risk premia between govenment and corporate bonds ----
# ************************************************************************
p <- ts_df(
ts_span(
ts_c(
`Notation AA-AAA`  = ts_span(RPAAA1, startDate),
`Notation BBB-AAA` = ts_span(RPBBB1, startDate)
),
start = startDate
)
) |>
ggplot(mapping = aes(x = time, y = value, color = id)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed", show.legend = FALSE) +
geom_vline(xintercept = myLines, colour = "blue", linewidth = 1, alpha = 0.5) +
scale_x_date(date_breaks = "1 year", date_labels = "%y") +
theme_minimal() +
labs(
title = "Prime de risque à 1 ans (en pp)",
subtitle = "<span style = 'color: #1B9E77;'>Entreprises AA-AAA</span>, <span style = 'color: #D95F02;'>Entreprises BBB-AAA</span>",
caption = "@econmaett. Source de données: SIX",
x = "", y = ""
) +
scale_color_brewer(palette = "Dark2") +
theme(legend.position = "bottom", legend.margin = margin(0, 0, 0, 0), legend.box.margin = margin(-20, -5, 0, -5)) +
guides(col = guide_legend(nrow = 2, byrow = TRUE)) +
theme(legend.title = element_blank()) +
theme(axis.line = element_line(colour = "black", linewidth = 0.1)) +
theme(panel.background = element_blank()) +
theme(panel.border = element_rect(linetype = "solid", colour = "black", fill = NA)) +
theme(text = element_text(family = "Palatino")) +
theme(panel.grid.major = element_line(colour = "black", linewidth = 0.1, linetype = "dotted"), panel.grid.minor = element_blank()) +
theme(plot.subtitle = element_markdown(), legend.position = "none")
p <- p + geom_text(x = myLines[1], y = 1.3, label = "Faillite Lehman", colour = "blue", angle = 90, vjust = -1)
p <- p + geom_text(x = myLines[2], y = 1.0, label = "Fin du taux plancher", colour = "blue", angle = 90, vjust = -1)
p <- p + geom_text(x = myLines[3], y = 1.0, label = "Crise Corona", colour = "blue", angle = 90, vjust = -1)
p
# Le risque d’être en faillite, et donc la prime de risque,
# augmente dans des crises économiques.
# Une «courbe de fièvre» avec laquelle on peut rapidement détecter des crisés économiques
ggsave(filename = "S01E01_PrimeDeRisque/PrimesDeRisque.png", width = 8, height = 4)
graphics.off()
usethis::use_git()
